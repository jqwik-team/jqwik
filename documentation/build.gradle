plugins {
	id 'jqwik.common-configuration'
}

plugins {
	id 'org.jetbrains.kotlin.jvm'
}

description = "Jqwik Documentation generation"

static releaseNotesVersion(String versionString) {
	def version = versionString.replaceAll(/\./, '').toLowerCase()
	return version
}

static isSnapshot(String versionString) {
	return versionString.contains('SNAPSHOT')
}

static gitVersion(String versionString) {
	if (isSnapshot(versionString))
		return 'master'
	else
		return versionString
}

static docsVersion(String versionString) {
	if (isSnapshot(versionString))
		return 'snapshot'
	else
		return versionString
}

def userGuideTemplate = 'user-guide.template.md'

task composeUserGuide(type: Copy) {
	from('src/docs/') {
		include userGuideTemplate
	}
	into "$buildDir/docs"
	expand(
		version: '${version}',
		gitVersion: '${gitVersion}',
		docsVersion: '${docsVersion}',
		releaseNotesVersion: '${releaseNotesVersion}',
		junitPlatformVersion: '${junitPlatformVersion}',
		junitJupiterVersion: '${junitJupiterVersion}',
		opentest4jVersion: '${opentest4jVersion}',
	)
}

task expandUserGuide(type: Copy) {
	dependsOn composeUserGuide
	from("$buildDir/docs") {
		include userGuideTemplate
	}
	into "$buildDir/docs"
	rename { file -> 'user-guide.md' }
	expand(
		version: jqwikVersion,
		gitVersion: gitVersion(jqwikVersion),
		docsVersion: docsVersion(jqwikVersion),
		releaseNotesVersion: releaseNotesVersion(jqwikVersion),
		junitPlatformVersion: junitPlatformVersion,
		junitJupiterVersion: junitJupiterVersion,
		opentest4jVersion: opentest4jVersion,
		questionMark: '?'
	)
	doLast {
		file("$buildDir/docs/$userGuideTemplate").delete()
	}
}

task generateUserGuideToc(type: Exec) {
	dependsOn expandUserGuide

	workingDir "$buildDir/docs"

	commandLine 'doctoc', '--maxlevel', '4', 'user-guide.md'
}

task generateJavaDoc(type: Javadoc) {
	dependsOn ':kotlin:dokkaHtml'
	source(
		file("${rootDir}/api/src/main/java"),
		file("${rootDir}/web/src/main/java"),
		file("${rootDir}/time/src/main/java")
	)
	include("**/api/**")
	classpath = project.sourceSets.main.compileClasspath + project.sourceSets.test.compileClasspath
	failOnError = false
	destinationDir = file("${buildDir}/docs/javadoc")
}

task expandJavaDocIndexHtml(type: Copy) {
	from('src/docs/') {
		include 'index.template.html'
	}
	into "$buildDir/javadoc"
	rename { file -> 'index.html' }
	expand(
		version: jqwikVersion
	)
}

task generateDocumentation {
	dependsOn(generateUserGuideToc, generateJavaDoc, expandJavaDocIndexHtml)
	doLast {
		String docsFolder = "${buildDir}/docs-${docsVersion(jqwikVersion)}"
		file(docsFolder).delete()
		file("${buildDir}/docs").renameTo(docsFolder)
		String javadocCurrentFolder = "${buildDir}/javadoc-current"
		file(javadocCurrentFolder).delete()
		if (!isSnapshot(jqwikVersion)) {
			file("${buildDir}/javadoc").renameTo(javadocCurrentFolder)
		} else {
			file("${buildDir}/javadoc").delete()
		}
	}
}

test {
	useJUnitPlatform {
		includeEngines "jqwik"
	}

	exclude 'net/jqwik/docs/**' // some tests are supposed to fail

	testLogging.showStandardStreams = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
	kotlinOptions.freeCompilerArgs = [
		"-Xemit-jvm-type-annotations" // Required for annotations on type variables
	]
	kotlinOptions.jvmTarget = "${javaTargetVersion}"
	kotlinOptions.javaParameters = true
}

compileTestKotlin {
	kotlinOptions.suppressWarnings = true
}

dependencies {
	testImplementation(project(":base"))
	testImplementation(project(":time"))
	testImplementation(project(":web"))
	testImplementation(project(":testing"))
	testImplementation(project(":kotlin"))
	testRuntimeOnly("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxVersion}")
	testImplementation("org.mockito:mockito-core:${mockitoVersion}")
	testImplementation("org.assertj:assertj-core:${assertJVersion}")
}

