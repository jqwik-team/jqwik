plugins {
	id 'jqwik.common-configuration'
	id 'jqwik.module-configuration'
	id 'org.jetbrains.kotlin.jvm'
	id 'org.jetbrains.dokka'
}

description = "Jqwik Kotlin module"

jar {
	archiveBaseName.set('jqwik-kotlin')
	archiveVersion.set("${jqwikVersion}")
}

// Should this be replaced by a dokkaJavadoc?
task publishKotlinJavadoc(type: Javadoc) {
	source = file('./src/main/kotlin')
	failOnError = false
	destinationDir = file("${rootDir}/docs/javadoc")
	include '**/api/**'
}

tasks.named("dokkaHtml") {
	moduleName.set("jqwik-kotlin")
	outputDirectory.set(file("${rootDir}/documentation/build/docs/kdoc"))
	dokkaSourceSets.named("main") {
		perPackageOption {
			matchingRegex.set(".*\\.internal.*")
			suppress.set(true)
		}
	}
}

publishing {
	publications {
		jqwikKotlin(MavenPublication) {
			groupId = 'net.jqwik'
			artifactId = 'jqwik-kotlin'
			from components.java
			pom {
				groupId = 'net.jqwik'
				name = 'jqwik-kotlin'
				description = project.description
				url = 'https://jqwik.net/'
				licenses {
					license {
						name = 'Eclipse Public License - v 2.0'
						url = 'http://www.eclipse.org/legal/epl-v20.html'
					}
				}
				developers {
					developer {
						id = 'jlink'
						name = 'Johannes Link'
						email = 'business@johanneslink.net'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/jqwik-team/jqwik.git'
					developerConnection = 'scm:git:git://github.com/jqwik-team/jqwik.git'
					url = 'https://github.com/jqwik-team/jqwik'
				}
			}
		}
	}
}

signing {
	if (!isSnapshotRelease) {
		sign publishing.publications.jqwikKotlin
	}
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
	kotlinOptions.freeCompilerArgs = [
		"-Xemit-jvm-type-annotations" // Required for annotations on type variables
	]
	kotlinOptions.jvmTarget = "${javaTargetVersion}"
	kotlinOptions.javaParameters = true // Required to get correct parameter names in reporting
}

compileTestKotlin {
	kotlinOptions.suppressWarnings = true
}

test {
	useJUnitPlatform {
		includeEngines 'jqwik'
	}

	include 'net/**/*Properties.class'
	include 'net/**/*Test.class'
	include 'net/**/*Tests.class'

	reports {
		junitXml.required = true
	}

	testLogging.showStandardStreams = showStandardStreams
}

dependencies {
	api(project(":api"))
	api("org.opentest4j:opentest4j:${opentest4jVersion}")

	implementation("org.jetbrains.kotlin:kotlin-stdlib")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxVersion}")
	testImplementation project(path: ':web')

	runtimeOnly(project(":engine"))

	testImplementation(project(":testing"))

	testImplementation("org.mockito:mockito-core:${mockitoVersion}")
	testImplementation("org.assertj:assertj-core:${assertJVersion}")
	testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:${kotlinxVersion}")
	testRuntimeOnly ("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

	// Necessary in order to run all tests of a package in IntelliJ IDEA 2022.3.2
	testImplementation("io.kotest:kotest-runner-junit5:${kotestVersion}")
}
