plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	// See https://github.com/vlsi/vlsi-release-plugins/blob/master/plugins/gradle-extensions-plugin/README.md
	id 'com.github.vlsi.gradle-extensions'
}

repositories {
	mavenCentral()
	//maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
}

group = moduleName
version = jqwikVersion

tasks['publish'].dependsOn(build)

publishing {
	repositories {
		maven {
			// hint: credentials are in ~/.gradle/gradle.properties
			// Since June 2024 Sonatype seems to require a token for publishing
			def repoUsername = project.hasProperty('tokenUsername') ? project.tokenUsername : ''
			def repoPassword = project.hasProperty('tokenPassword') ? project.tokenPassword : ''

			//def repoUsername = project.hasProperty('sonatypeUsername') ? project.sonatypeUsername : ''
			//def repoPassword = project.hasProperty('sonatypePassword') ? project.sonatype : ''

			credentials {
				username = repoUsername
				password = repoPassword
			}

			// change URLs to point to your repos, e.g. http://my.org/repo
			// def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			// def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

			// Documentation for new publishing mechanism: https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/
			// Both release and snapshot publishing has not been figured out completely yet
			def releasesRepoUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/"

			url = isSnapshotRelease ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}

java {
	withJavadocJar()
	withSourcesJar()
	sourceCompatibility = JavaVersion.toVersion("${javaTargetVersion}")
	targetCompatibility = JavaVersion.toVersion("${javaTargetVersion}")
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

compileTestJava {
	options.compilerArgs += '-parameters'
}

dependencies {
	api("org.apiguardian:apiguardian-api:${apiGuardianVersion}")
	compileOnly("org.jspecify:jspecify:${jspecifyVersion}")

	// testCompilation should suffice but Java 8 will mess up reflection then
	testImplementation("org.jspecify:jspecify:${jspecifyVersion}")
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
}

// Enable to get more compiler warnings.
//	tasks.withType(JavaCompile) {
//		options.compilerArgs << '-Xlint:unchecked'
//		options.deprecation = true
//	}
